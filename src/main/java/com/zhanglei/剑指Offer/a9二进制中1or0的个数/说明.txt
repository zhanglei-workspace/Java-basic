https://www.cnblogs.com/edisonchou/p/4752086.html
   该博客有一个错误的地方：是跳出循环的条件是(n!=0)

题目：请实现一个函数，输入一个整数，输出该数二进制表示中1的个数。
例如把9表示成二进制是1001，有2位是1。因此如果输入9，该函数输出2。

思路：
    把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0。
    那么一个整数的二进制表示中有多少个1，就可以进行多少次这样的操作。

    PS：把一个整数减去1之后再和原来的整数做位与运算，
    得到的结果相当于是把整数的二进制表示中的最右边一个1变成0。
    很多二进制的问题都可以用这个思路解决。


    Java提供的位运算符有：左移( << )、右移( >> ) 、无符号右移( >>> ) 、位与( & ) 、位或( | )、
    位非( ~ )、位异或( ^ )，除了位非( ~ )是一元操作符外，其它的都是二元操作符。

    左移低位补零
    正数右移，高位用0补，负数右移，高位用1补，当负数使用无符号右移时，用0进行部位(自然而然的，就由负数变成了正数了)

