https://www.cnblogs.com/edisonchou/p/4780973.html


题目：输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true，否则返回false。
假设输入的数组的任意两个数字都互不相同。

　　例如在下面的一颗二叉搜索树中，输入数组{5,7,6,9,11,10,8}，则返回true，因为这个整数序列是下图二叉搜索树的后序遍历结果。
如果输入的数组是{7,4,6,5}，由于没有哪棵二叉搜索树的后序遍历的结果是这个序列，因此返回false。



 核心步骤
　　在后序遍历得到的序列中，最后一个数字是树的根结点的值。数组中前面的数字可以分为两部分：第一部分是左子树结点的值，它们都比根结点的值小；第二部分是右子树结点的值，它们都比根结点的值大。

　　因此，我们可以总结出算法步骤：

　　Step1.通过取出序列[start,end]最后一个元素得到二叉搜索树的根节点root；

    遍历数组（[0,root)）:从左边到右找第一个大于于root的值index1,从右边（root-1）向左找最后一个大于root的index2。
    此时，如果符合条件index1 = index2 （不符合条件就返回false）
    [start,index1-1]-->左子树。[index1,root-1]-->右子树

    递归检测左右子树，        if (start >= end) return true;

　　Step4.重复以上步骤递归判断左右子树是不是二叉搜索树，如果都是，则返回true，如果不是，则返回false;